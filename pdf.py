import io
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER
import pandas as pd
import plotly.graph_objects as go
import base64

def generate_segment_report(clustered_df=None, analysis_type="General Clustering", figures=None,
                            apriori_frequent_itemsets=None, apriori_association_rules=None):
    """
    Generates a comprehensive PDF report for customer segmentation analysis.

    Parameters:
    -----------
    clustered_df : pd.DataFrame, optional
        The DataFrame containing clustered customer data, including a 'Cluster' column.
        Required for General Clustering and RFM Analysis sections.
    analysis_type : str
        The type of analysis performed ('general_clustering', 'rfm_analysis', 'apriori_analysis', etc.).
        Used for dynamic content generation.
    figures : list of plotly.graph_objects.Figure, optional
        A list of Plotly figures to be included in the report.
    apriori_frequent_itemsets : pd.DataFrame, optional
        DataFrame containing frequent itemsets from Apriori analysis.
    apriori_association_rules : pd.DataFrame, optional
        DataFrame containing association rules from Apriori analysis.

    Returns:
    --------
    io.BytesIO
        A BytesIO object containing the generated PDF.
    """
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=letter)
    styles = getSampleStyleSheet()
    
    # Custom style for titles
    title_style = ParagraphStyle(
        'TitleStyle',
        parent=styles['h1'],
        fontSize=24,
        spaceAfter=14,
        alignment=TA_CENTER
    )
    
    # Custom style for section headings
    heading_style = ParagraphStyle(
        'HeadingStyle',
        parent=styles['h2'],
        fontSize=16,
        spaceBefore=12,
        spaceAfter=6
    )

    # Custom style for sub-headings
    sub_heading_style = ParagraphStyle(
        'SubHeadingStyle',
        parent=styles['h3'],
        fontSize=14,
        spaceBefore=10,
        spaceAfter=4
    )

    # Custom style for normal text
    normal_style = styles['Normal']
    normal_style.fontSize = 10
    normal_style.leading = 12 # Line spacing

    # Custom style for table text
    table_style = ParagraphStyle(
        'TableStyle',
        parent=styles['Normal'],
        fontSize=8, # Smaller font for tables
        leading=10
    )

    story = []

    # --- Cover Page ---
    story.append(Paragraph("Customer Segmentation Report", title_style))
    story.append(Spacer(1, 0.5 * inch))
    story.append(Paragraph(f"Analysis Type: {analysis_type.replace('_', ' ').title()}", styles['h3']))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph(f"Date: {pd.Timestamp.now().strftime('%Y-%m-%d %H:%M:%S')}", styles['Normal']))
    story.append(Spacer(1, 2 * inch))
    story.append(Paragraph("Generated by Your Customer Segmentation App", styles['Normal']))
    story.append(PageBreak())

    # --- Introduction ---
    story.append(Paragraph("Introduction", heading_style))
    story.append(Paragraph(
        "This report provides an in-depth analysis of customer behavior and segmentation based on the uploaded dataset. "
        "Understanding customer segments allows businesses to tailor marketing strategies, improve product offerings, "
        "and enhance customer relationships.", normal_style))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph(f"The primary analysis performed was: <b>{analysis_type.replace('_', ' ').title()}</b>.", normal_style))
    story.append(PageBreak())

    # --- Clustering Analysis Section (if applicable) ---
    if clustered_df is not None and not clustered_df.empty and (analysis_type == 'general_clustering' or analysis_type == 'rfm_analysis'):
        story.append(Paragraph("Customer Segmentation Analysis", heading_style))
        story.append(Paragraph(
            "This section details the results of the customer clustering analysis, identifying distinct groups of customers "
            "based on their behavioral patterns.", normal_style))
        story.append(Spacer(1, 0.2 * inch))

        # Summary Table of Clusters
        story.append(Paragraph("Summary of Customer Segments", sub_heading_style))
        if 'Cluster' in clustered_df.columns:
            cluster_summary = clustered_df['Cluster'].value_counts().reset_index()
            cluster_summary.columns = ['Cluster', 'Number of Customers']
            cluster_summary['Percentage'] = (cluster_summary['Number of Customers'] / cluster_summary['Number of Customers'].sum() * 100).round(2)
            cluster_summary_data = [['Cluster', 'Number of Customers', 'Percentage (%)']] + cluster_summary.values.tolist()
            
            # Convert all elements to string for ReportLab Table
            cluster_summary_data = [[str(item) for item in row] for row in cluster_summary_data]

            from reportlab.platypus import Table, TableStyle
            from reportlab.lib import colors

            table = Table(cluster_summary_data)
            table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(table)
            story.append(Spacer(1, 0.2 * inch))
            story.append(Paragraph(
                "The table above provides an overview of the number and percentage of customers in each identified segment.", normal_style))
            story.append(Spacer(1, 0.2 * inch))
        
        # RFM Specific Summary (if applicable)
        if analysis_type == 'rfm_analysis' and 'RFM_Segment' in clustered_df.columns:
            story.append(Paragraph("RFM Segment Breakdown", sub_heading_style))
            rfm_segment_summary = clustered_df['RFM_Segment'].value_counts().reset_index()
            rfm_segment_summary.columns = ['RFM Segment', 'Number of Customers']
            rfm_segment_summary['Percentage'] = (rfm_segment_summary['Number of Customers'] / rfm_segment_summary['Number of Customers'].sum() * 100).round(2)
            rfm_segment_summary_data = [['RFM Segment', 'Number of Customers', 'Percentage (%)']] + rfm_segment_summary.values.tolist()
            
            rfm_segment_summary_data = [[str(item) for item in row] for row in rfm_segment_summary_data]

            table_rfm = Table(rfm_segment_summary_data)
            table_rfm.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            story.append(table_rfm)
            story.append(Spacer(1, 0.2 * inch))
            story.append(Paragraph(
                "This table provides a breakdown of customers across the predefined RFM segments, offering insights into their value and engagement.", normal_style))
            story.append(Spacer(1, 0.2 * inch))


        # Include Figures
        if figures:
            story.append(Paragraph("Visualizations of Customer Segments", sub_heading_style))
            for i, fig in enumerate(figures):
                img_bytes = fig.to_image(format="png", engine="kaleido")
                img = Image(io.BytesIO(img_bytes))
                img.width = 500 # Adjust width to fit page
                img.height = img.width * (fig.layout.height / fig.layout.width) if fig.layout.width else 300 # Maintain aspect ratio
                
                # Center the image
                img.hAlign = 'CENTER'
                
                story.append(img)
                story.append(Spacer(1, 0.1 * inch))
                story.append(Paragraph(f"Figure {i+1}: {fig.layout.title.text if fig.layout.title else 'Untitled Figure'}", normal_style))
                story.append(Spacer(1, 0.3 * inch))
                if (i + 1) % 2 == 0 and i < len(figures) - 1: # Add page break after every 2 figures (adjust as needed)
                    story.append(PageBreak())
            story.append(PageBreak())

    # --- Apriori Analysis Section (if applicable) ---
    if apriori_frequent_itemsets is not None and not apriori_frequent_itemsets.empty:
        story.append(Paragraph("Apriori Association Rule Analysis", heading_style))
        story.append(Paragraph(
            "This section presents the results of the Apriori algorithm, which identifies frequent itemsets and "
            "association rules in transactional data, useful for understanding product co-occurrence.", normal_style))
        story.append(Spacer(1, 0.2 * inch))

        story.append(Paragraph("Frequent Itemsets", sub_heading_style))
        # Limit columns for display if too many
        cols_to_display_fi = ['itemsets', 'support']
        fi_data = [['Itemsets', 'Support']] + apriori_frequent_itemsets[cols_to_display_fi].values.tolist()
        fi_data = [[str(item) for item in row] for row in fi_data]
        
        table_fi = Table(fi_data)
        table_fi.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(table_fi)
        story.append(Spacer(1, 0.2 * inch))
        story.append(Paragraph(
            "Frequent itemsets are collections of items that frequently appear together in transactions. 'Support' indicates their prevalence.", normal_style))
        story.append(Spacer(1, 0.2 * inch))

    if apriori_association_rules is not None and not apriori_association_rules.empty:
        story.append(Paragraph("Association Rules", sub_heading_style))
        # Limit columns for display if too many
        cols_to_display_ar = ['antecedents', 'consequents', 'support', 'confidence', 'lift']
        ar_data = [['Antecedents', 'Consequents', 'Support', 'Confidence', 'Lift']] + apriori_association_rules[cols_to_display_ar].values.tolist()
        ar_data = [[str(item) for item in row] for row in ar_data]

        table_ar = Table(ar_data)
        table_ar.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(table_ar)
        story.append(Spacer(1, 0.2 * inch))
        story.append(Paragraph(
            "Association rules identify relationships between items. 'Confidence' measures the reliability of the inference, "
            "and 'Lift' indicates how much more likely item Y is purchased when item X is purchased, relative to their independent probabilities.", normal_style))
        story.append(PageBreak())

    # --- Conclusion (General) ---
    story.append(Paragraph("Conclusion", heading_style))
    story.append(Paragraph(
        "This report has provided insights into customer behavior through various analytical techniques. "
        "These findings can be leveraged to develop targeted marketing campaigns, optimize product placement, "
        "and improve overall customer satisfaction.", normal_style))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph(
        "For further analysis, consider exploring additional data points, experimenting with different clustering algorithms, "
        "or conducting deeper dives into specific customer segments.", normal_style))

    doc.build(story)
    buffer.seek(0)
    return buffer
